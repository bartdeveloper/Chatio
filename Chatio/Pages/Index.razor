@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@implements IAsyncDisposable

<div style="height: 100vh;">
    <div class="container" style="height: 20vh;">
        <div class="row">
            <div class="col-12">
                <input @bind="usernameInput" type="text" class="form-control" placeholder="Your name" readonly="@isUserReadonly"/>
            </div>
            <div class="col-12">
                <textarea @bind="messageInput" rows="4" class="form-control" placeholder="Start typing..."></textarea>
            </div>
            <div class="col-12 text-center" style="padding-top: 5px;">
                <button type="button" @onclick="Send" disabled="@(!IsConnected)" class="btn btn-success">Send</button>
            </div>
        </div>
    </div>


    <div @ref=DivMessagesRef  style="height: 75vh;" class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded">
        @if (!userMessages.Any())
        {
            <p>No messages yet, start chatting!</p>
        }

        @foreach (var userMessage in userMessages)
        {
            <div class="row mb-3 d-flex @(userMessage.CurrentUser ? "justify-content-end" : "")">
                <div class="card shadow @(userMessage.CurrentUser ? "color-green mr-5" : "ml-5")" style="width: 18rem;">
                    <div class="card-header" style="font-weight: bold;">
                        @(userMessage.CurrentUser ? "You" : userMessage.Username)
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item" style="font-style: italic;">@userMessage.Message</li>
                    </ul>
                    <div class="card-footer">
                        <span class="small">@userMessage.DateSent.ToString("HH:mm | dd MMM yyyy")</span>
                    </div>
                </div>
            </div>
        }
    </div>

</div>

@code{

    ElementReference DivMessagesRef;
    private HubConnection hubConnection;
    private List<ChatMessage> userMessages = new();
    private string usernameInput;
    private string messageInput;
    private bool isUserReadonly = false;

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            userMessages.Add(new ChatMessage { Username = user, Message = message, CurrentUser = user == usernameInput, DateSent = DateTime.Now });

            StateHasChanged();

            JS.InvokeVoidAsync("scrollToEnd", DivMessagesRef);
            
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(usernameInput) && !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", usernameInput, messageInput);

            isUserReadonly = true;
            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}