@page "/"
@using Blazored.LocalStorage
@using Chatio.Server.Components
@using Chatio.Hubs
@using Chatio.Models
@using Chatio.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Chatio.DataAccess.Models
@using System.Globalization
@inject NavigationManager navigationManager
@inject TimeZoneService timeZoneService
@inject IJSRuntime JS
@inject IToastService toastService
@inject ILocalStorageService localStorage
@inject IChatService chatService
@implements IAsyncDisposable

<div>

    @if (isUserLogged)
    {

        <div class="container first-part">

            <div class="header row">

                <!-- ROOM NAME -->
                <div class="col-xxl-8 col-xl-8 col-lg-8 col-md-8 col-sm-8 col-8">
                    <h1><i>#@roomInput</i></h1>
                </div>

                <!-- DISCONNECT BUTTON -->
                <div class="col-xxl-4 col-xl-4 col-lg-4 col-md-4 col-sm-4 col-4 text-align-right">
                    <button type="button" @onclick="Logout" hidden="@(!isConnected)" class="btn btn-secondary"><span class="oi oi-account-logout"></span> Disconnect</button>
                </div>

                <!-- USERS -->
                <div class="col-xxl-2 col-xl-2 col-lg-2 col-md-12 col-sm-12 col-12 users">
                    <strong>Users <small>(@users.Count)</small></strong>
                    <ul>
                        @foreach (var user in users)
                        {
                            <li class="user @(user == usernameInput ? "you" : "")">@user</li>
                        }
                    </ul>
                </div>

                <!-- SEND MESSAGE FORM -->
                <div class="col-xxl-10 col-xl-10 col-lg-10 col-md-12 col-sm-12 col-12">
                    <div class="row">
                        <div class="col-lg-10 col-sm-12">
                            <textarea @bind="messageInput" @ref=TextareaMessageRef rows="2" class="form-control" @onkeydown="SendMessageByEnter" placeholder="Message"></textarea>
                        </div>
                        <div class="col-lg-10 col-sm-12">
                            <button type="button" @ref=BtnSendRef @onclick="SendMessage" disabled="@(!isConnected)" class="col-12 btn btn-send">Send <span class="oi oi-check" aria-hidden="true"></span></button>
                        </div>
                    </div>
                </div>         

            </div>

        </div>

    }

    <!-- JOIN FORM -->
    @if (!isUserLogged)
    {

        <div class="container">
            <div class="row">

                <div class="container join-form">
                    <div class="row col-lg-4 col-8 padding-top-20">
                        <div class="chatio">Chatio 💬</div>
                        <div class="col-12">
                            <input @bind="usernameInput" type="text" class="form-control" @onkeydown="FocusRoom" placeholder="Name" readonly="@isUserLogged"/>
                        </div>
                        <div class="col-12">
                            <input @ref=InputRoomRef @bind="roomInput" rows="4" class="form-control" @onkeydown="JoinByEnter" placeholder="Room" />
                        </div>
                        <div class="col-12 text-center padding-top-5">
                            <button type="button" @ref=BtnJoinRef @onclick="Join" hidden="@(!isConnected)" class="col-md-12 col-sm-12 col-12 btn btn-warning">Join <span class="oi oi-account-login"></span></button>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <Footer></Footer>

    }

    <!-- MESSAGES -->
    @if (isUserLogged)
    {

        <Messages messages=messages></Messages>

    }

</div>

@code {

    ElementReference BtnJoinRef;
    ElementReference BtnSendRef;
    ElementReference TextareaMessageRef;
    ElementReference InputRoomRef;

    private HubConnection hubConnection;
    private List<ChatMessageDTO> messages = new();
    private List<string> users = new();
    private string usernameInput;
    private string roomInput;
    private string messageInput;
    private string connectionId;
    private bool isUserLogged = false;
    private bool isConnected => hubConnection?.State == HubConnectionState.Connected;  
    private TimeSpan userOffsetTime;

    protected override async Task OnInitializedAsync()
    {
        Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
        await Login();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {    
        if(firstRender){   
            userOffsetTime = await timeZoneService.GetLocalOffset();
            usernameInput = await localStorage.GetItemAsync<string>("user");
            roomInput = await localStorage.GetItemAsync<string>("room");
            StateHasChanged();
            if (!string.IsNullOrEmpty(usernameInput) && !string.IsNullOrEmpty(roomInput))
            {
                await Join();
            }          
        }
    }

    public async ValueTask DisposeAsync()
    {
        await StopChat();
    }

    public async Task StopChat()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
        }
    }

    public async Task GetConnectionId() {
        connectionId = await hubConnection.InvokeAsync<string>("getConnectionId");
    }

    public async Task Login()
    {   

        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>(ChatHub.METHOD_RECEIVE_MESSAGE, (user, message) =>
        {

            messages.Add(new ChatMessageDTO
            {
                Username = user,
                Message = message.FillEmojiInText(),
                CurrentUser = user == usernameInput,
                DateSent = DateTimeOffset.UtcNow.ToOffset(userOffsetTime)
            });

            StateHasChanged();

            JS.InvokeVoidAsync("scrollToEndMessages");
            JS.InvokeVoidAsync("setTitleWithoutFocus", "Chatio");

            TextareaMessageRef.FocusAsync();

        });

        hubConnection.On<List<string>>(ChatHub.METHOD_ROOM_MESSAGE, (users) =>
        {
            this.users = users;

            StateHasChanged();

        });

        await hubConnection.StartAsync();  
        await GetConnectionId();

    }

    public async Task Logout()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Disconnect");
            messages = new();
            users = new();
            isUserLogged = false;
            toastService.ShowSuccess("Disconnected...");
        }  
    }

    private async Task Join()
    {  
        await BtnJoinRef.FocusAsync();

        if (!string.IsNullOrEmpty(usernameInput) && !string.IsNullOrEmpty(roomInput))
        {

            if(usernameInput.Equals(ChatHub.BOT_NAME, StringComparison.InvariantCultureIgnoreCase))
            {
                toastService.ShowError($"Restricted name! ({ChatHub.BOT_NAME})");
                return;    
            }

            var isUsernameTaken = await hubConnection.InvokeAsync<bool>("IsUsernameTaken", roomInput, usernameInput);

            if (isUsernameTaken)
            {
                toastService.ShowError($"Name {usernameInput} is taken in room {roomInput}");
            }
            else
            {

                var msgs = chatService.List(roomInput.ToLowerInvariant());
                foreach(var msg in msgs)
                {
                    messages.Add(new ChatMessageDTO()
                    {
                        Username = msg.Username,
                        DateSent = msg.DateSent,
                        CurrentUser = msg.Username == usernameInput,
                        Message = msg.Message.FillEmojiInText()
                    });
                }

                await localStorage.SetItemAsync("user", usernameInput);
                await localStorage.SetItemAsync("room", roomInput);

                await hubConnection.SendAsync("JoinToRoom", new ChatUser() { User = usernameInput, Room = roomInput.ToLowerInvariant() });

                isUserLogged = true;
                messageInput = string.Empty;

                StateHasChanged();

                await JS.InvokeVoidAsync("scrollToEndMessages");

                toastService.ShowSuccess($"Joined to the room: {roomInput}");

            }

        } else
        {
            toastService.ShowError($"Fill your name & room.");
        }

    }

    public async Task JoinByEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {        
            await Join();
        }
    }

    public async Task FocusRoom(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {        
            await InputRoomRef.FocusAsync();
        }
    }

    private async Task SendMessage()
    {
        await BtnSendRef.FocusAsync();

        messageInput = ClearInput(messageInput);

        if (!string.IsNullOrEmpty(usernameInput) && !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", messageInput);
            await chatService.Add(new ChatMessage() { Username = usernameInput, Room = roomInput.ToLowerInvariant(), Message = messageInput, DateSent = DateTimeOffset.UtcNow.ToOffset(userOffsetTime) });
            messageInput = string.Empty;
        } else
        {
            toastService.ShowError($"Type message!");
        }

        await TextareaMessageRef.FocusAsync();
    }

    public async Task SendMessageByEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {        
            await SendMessage();
        }
    }

    public string ClearInput(string input) => input.Trim().ReplaceLineEndings();

}